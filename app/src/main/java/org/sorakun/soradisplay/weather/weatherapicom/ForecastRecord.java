package org.sorakun.soradisplay.weather.weatherapicom;

import android.widget.ImageView;
import android.widget.TextView;

import com.squareup.picasso.Picasso;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.sorakun.soradisplay.Util;
import org.sorakun.soradisplay.databinding.FragmentTodayWeatherBinding;
import org.sorakun.soradisplay.databinding.FragmentWeatherForecastBinding;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import static org.sorakun.soradisplay.Util.getChanceOfRainColor;
import static org.sorakun.soradisplay.Util.getHumidityColor;
import static org.sorakun.soradisplay.Util.getTemperatureColor;

/**
 * Record class for the Weatherapi.com
 * Forecast api. This class was partially
 * generated by jsonformatter.org
 */
public class ForecastRecord {

    public static void callPicasso(String url, ImageView icon) {
        url = url.replace("64x64", "128x128");
        // insert http prefix if needed
        if (url.substring(0, 2).compareTo("//") == 0) {
            url = "http:" + url;
        }
        Picasso.get().load(url).into(icon);
    }

    private Location location;
    private Current current;
    private Forecast forecast;

    public Location getLocation() { return location; }
    public void setLocation(Location value) { this.location = value; }

    public Current getCurrent() { return current; }
    public void setCurrent(Current value) { this.current = value; }

    public Forecast getForecast() { return forecast; }
    public void setForecast(Forecast value) { this.forecast = value; }

    /**
     * get the list of current day's hours , filtered
     * by last updated epoch
     * @return a list of Hour object
     */
    public ArrayList<Hour> getForecastedHours() {
        Hour[] today = forecast.forecastday[0].hour;
        Hour firstHour = null;
        ArrayList<Hour> results = new ArrayList<>();
        for (Hour hour : today) {

            if (current.lastUpdatedEpoch < hour.timeEpoch) {
                results.add(hour);
            } else {
                firstHour = hour;
            }
        }
        if (firstHour != null) {
            results.add(0, firstHour);
        }
        Hour[] tomorrow = forecast.forecastday[1].hour;
        for (Hour hour : tomorrow) {

            if (current.lastUpdatedEpoch < hour.timeEpoch) {
                results.add(hour);
            }
        }
        return results;
    }

    public ForecastRecord() {
    }
    public void update(JSONObject o) throws JSONException {
        this.location = new Location(o.getJSONObject("location"));
        this.current = new Current(o.getJSONObject("current"));
        this.forecast = new Forecast(o.getJSONObject("forecast"));
    }
    public Boolean isReady() {
        return location != null;
    }

    public void updateTodayViews(FragmentTodayWeatherBinding binding) {
        // if lastupdated timestamp hasnt changed then dont update
        if (current.lastUpdated != null && current.lastUpdated.compareTo(
                String.valueOf(binding.lastupdated.getText())) == 0) {
            // lastupdated in this record is the same as the one in binding
            // no need to update
            return;
        }
        binding.lastupdated.setText(current.lastUpdated);
        binding.dayLocation.setText(location.name);
        binding.temperature.setText(Util.printF("%d°c", current.tempC.intValue()));
        binding.temperature.setTextColor(getTemperatureColor(current.tempC));
        binding.condition.setText(Util.printF("%s", current.condition.text));

        binding.currentIcon.setAdjustViewBounds(true);
        binding.currentIcon.setMinimumWidth(60);
        binding.currentIcon.setMinimumHeight(60);
        //new Util.DownloadImageTask(binding.currentIcon).execute(current.condition.icon);
        callPicasso(current.condition.icon, binding.currentIcon);

        binding.label1.setText("Feels:");
        binding.value1.setText(Util.printF("%d°c", current.feelslikeC.intValue()));
        binding.value1.setTextColor(getTemperatureColor(current.feelslikeC));
        binding.label2.setText("Humidity:");
        binding.value2.setText(Util.printF("%d%%", current.humidity.intValue()));
        binding.value2.setTextColor(getHumidityColor(current.humidity));
        //binding.label3.setText("Rain:");
        //binding.value3.setText(Util.printF("%dmm", current.precipMm.intValue()));
        binding.label3.setText("Wind (km/h):");
        binding.value3.setText(Util.printF("%d~%d", current.windKph.intValue(), current.gustKph.intValue()));
    }

    public void updateFutureViews(FragmentWeatherForecastBinding binding) {
        // if lastupdated timestamp hasnt changed then dont update
        if (current.lastUpdated != null && current.lastUpdated.compareTo(
                String.valueOf(binding.lastupdated.getText())) == 0) {
            // lastupdated in this record is the same as the one in binding
            // no need to update
            return;
        }
        binding.lastupdated.setText(current.lastUpdated);
        binding.weekLocation.setText(location.name);
    }

    // The current block
    public class Current {
        private long lastUpdatedEpoch;
        private String lastUpdated;
        private Double tempC;
        private Double tempF;
        private long isDay;
        private Condition condition;
        private Double windMph;
        private Double windKph;
        private long windDegree;
        private String windDir;
        private Double pressureMB;
        private Double pressureIn;
        private Double precipMm;
        private Double precipIn;
        private Double humidity;
        private long cloud;
        private Double feelslikeC;
        private Double feelslikeF;
        private Double visKM;
        private Double visMiles;
        private Double uv;
        private Double gustMph;
        private Double gustKph;

        public Current(JSONObject o) throws JSONException {
            lastUpdated = o.getString("last_updated");
            windKph = o.getDouble("wind_kph");
            tempC = o.getDouble("temp_c");
            condition = new Condition(o.getJSONObject("condition"));
            precipMm = o.getDouble("precip_mm");
            gustKph = o.getDouble("gust_kph");
            humidity = o.getDouble("humidity");
            feelslikeC = o.getDouble("feelslike_c");
            lastUpdatedEpoch = o.getLong("last_updated_epoch");
        }

        public long getLastUpdatedEpoch() { return lastUpdatedEpoch; }
        public void setLastUpdatedEpoch(long value) { this.lastUpdatedEpoch = value; }

        public String getLastUpdated() { return lastUpdated; }
        public void setLastUpdated(String value) { this.lastUpdated = value; }

        public Double getTempC() { return tempC; }
        public void setTempC(double value) { this.tempC = value; }

        public Double getTempF() { return tempF; }
        public void setTempF(double value) { this.tempF = value; }

        public long getIsDay() { return isDay; }
        public void setIsDay(long value) { this.isDay = value; }

        public Condition getCondition() { return condition; }
        public void setCondition(Condition value) { this.condition = value; }

        public Double getWindMph() { return windMph; }
        public void setWindMph(double value) { this.windMph = value; }

        public Double getWindKph() { return windKph; }
        public void setWindKph(double value) { this.windKph = value; }

        public long getWindDegree() { return windDegree; }
        public void setWindDegree(long value) { this.windDegree = value; }

        public String getWindDir() { return windDir; }
        public void setWindDir(String value) { this.windDir = value; }

        public Double getPressureMB() { return pressureMB; }
        public void setPressureMB(double value) { this.pressureMB = value; }

        public Double getPressureIn() { return pressureIn; }
        public void setPressureIn(double value) { this.pressureIn = value; }

        public Double getPrecipMm() { return precipMm; }
        public void setPrecipMm(double value) { this.precipMm = value; }

        public Double getPrecipIn() { return precipIn; }
        public void setPrecipIn(double value) { this.precipIn = value; }

        public Double getHumidity() { return humidity; }
        public void setHumidity(Double value) { this.humidity = value; }

        public long getCloud() { return cloud; }
        public void setCloud(long value) { this.cloud = value; }

        public Double getFeelslikeC() { return feelslikeC; }
        public void setFeelslikeC(double value) { this.feelslikeC = value; }

        public Double getFeelslikeF() { return feelslikeF; }
        public void setFeelslikeF(double value) { this.feelslikeF = value; }

        public Double getVisKM() { return visKM; }
        public void setVisKM(double value) { this.visKM = value; }

        public Double getVisMiles() { return visMiles; }
        public void setVisMiles(double value) { this.visMiles = value; }

        public Double getUv() { return uv; }
        public void setUv(double value) { this.uv = value; }

        public Double getGustMph() { return gustMph; }
        public void setGustMph(double value) { this.gustMph = value; }

        public Double getGustKph() { return gustKph; }
        public void setGustKph(double value) { this.gustKph = value; }
    }

    // The condition block
    public class Condition {
        private String text;
        private String icon;
        private long code;

        public Condition(JSONObject o) throws JSONException {
            text = o.getString("text");
            icon = o.getString("icon");
        }

        public String getText() { return text; }
        public void setText(String value) { this.text = value; }

        public String getIcon() { return icon; }
        public void setIcon(String value) { this.icon = value; }

        public long getCode() { return code; }
        public void setCode(long value) { this.code = value; }
    }

    // The forecast block
    public class Forecast {
        private Forecastday[] forecastday;

        public Forecastday[] getForecastday() { return forecastday; }
        public void setForecastday(Forecastday[] value) { this.forecastday = value; }

        public Forecast(JSONObject o) throws JSONException {
            JSONArray ja = o.getJSONArray("forecastday");
            forecastday = new Forecastday[ja.length()];

            for (int i = 0; i < ja.length(); i++) {
                JSONObject jo = ja.getJSONObject(i);
                forecastday[i] = new Forecastday(jo);
            }
        }
    }

    // The forecastday block
    public class Forecastday {
        private String date;
        private long dateEpoch;
        private Day day;
        private Astro astro;
        private Hour[] hour;

        public Forecastday(JSONObject o) throws JSONException {
            day = new Day(o.getJSONObject("day"));
            JSONArray ja = o.getJSONArray("hour");
            hour = new Hour[ja.length()];

            for (int i = 0; i < ja.length(); i++) {
                JSONObject jo = ja.getJSONObject(i);
                hour[i] = new Hour(jo);
            }
            date = o.getString("date");
            dateEpoch = o.getLong("date_epoch");
        }

        public String getDate() { return date; }
        public void setDate(String value) { this.date = value; }

        public long getDateEpoch() { return dateEpoch; }
        public void setDateEpoch(long value) { this.dateEpoch = value; }

        public Day getDay() { return day; }
        public void setDay(Day value) { this.day = value; }

        public Astro getAstro() { return astro; }
        public void setAstro(Astro value) { this.astro = value; }

        public Hour[] getHour() { return hour; }
        public void setHour(Hour[] value) { this.hour = value; }
    }

    // The astro block
    public class Astro {
        private String sunrise;
        private String sunset;
        private String moonrise;
        private String moonset;
        private String moonPhase;
        private String moonIllumination;
        private long isMoonUp;
        private long isSunUp;

        public String getSunrise() { return sunrise; }
        public void setSunrise(String value) { this.sunrise = value; }

        public String getSunset() { return sunset; }
        public void setSunset(String value) { this.sunset = value; }

        public String getMoonrise() { return moonrise; }
        public void setMoonrise(String value) { this.moonrise = value; }

        public String getMoonset() { return moonset; }
        public void setMoonset(String value) { this.moonset = value; }

        public String getMoonPhase() { return moonPhase; }
        public void setMoonPhase(String value) { this.moonPhase = value; }

        public String getMoonIllumination() { return moonIllumination; }
        public void setMoonIllumination(String value) { this.moonIllumination = value; }

        public long getIsMoonUp() { return isMoonUp; }
        public void setIsMoonUp(long value) { this.isMoonUp = value; }

        public long getIsSunUp() { return isSunUp; }
        public void setIsSunUp(long value) { this.isSunUp = value; }
    }

    // The day block
    public class Day {
        private Double maxtempC;
        private Double maxtempF;
        private Double mintempC;
        private Double mintempF;
        private Double avgtempC;
        private Double avgtempF;
        private Double maxwindMph;
        private Double maxwindKph;
        private Double totalprecipMm;
        private Double totalprecipIn;
        private Double totalsnowCM;
        private Double avgvisKM;
        private Double avgvisMiles;
        private Double avghumidity;
        private long dailyWillItRain;
        private Double dailyChanceOfRain;
        private long dailyWillItSnow;
        private Double dailyChanceOfSnow;
        private Condition condition;
        private Double uv;

        public Day(JSONObject o) throws JSONException {
            maxtempC = o.getDouble("maxtemp_c");
            mintempC = o.getDouble("mintemp_c");
            maxwindKph = o.getDouble("maxwind_kph");
            totalprecipMm = o.getDouble("totalprecip_mm");
            avgtempC = o.getDouble("avgtemp_c");
            avghumidity = o.getDouble("avghumidity");
            condition = new Condition(o.getJSONObject("condition"));
            dailyChanceOfRain = o.getDouble("daily_chance_of_rain");
            dailyChanceOfSnow = o.getDouble("daily_chance_of_snow");
        }

        public Double getMaxtempC() { return maxtempC; }
        public void setMaxtempC(double value) { this.maxtempC = value; }

        public Double getMaxtempF() { return maxtempF; }
        public void setMaxtempF(double value) { this.maxtempF = value; }

        public Double getMintempC() { return mintempC; }
        public void setMintempC(double value) { this.mintempC = value; }

        public Double getMintempF() { return mintempF; }
        public void setMintempF(double value) { this.mintempF = value; }

        public Double getAvgtempC() { return avgtempC; }
        public void setAvgtempC(double value) { this.avgtempC = value; }

        public Double getAvgtempF() { return avgtempF; }
        public void setAvgtempF(double value) { this.avgtempF = value; }

        public Double getMaxwindMph() { return maxwindMph; }
        public void setMaxwindMph(double value) { this.maxwindMph = value; }

        public Double getMaxwindKph() { return maxwindKph; }
        public void setMaxwindKph(double value) { this.maxwindKph = value; }

        public Double getTotalprecipMm() { return totalprecipMm; }
        public void setTotalprecipMm(double value) { this.totalprecipMm = value; }

        public Double getTotalprecipIn() { return totalprecipIn; }
        public void setTotalprecipIn(double value) { this.totalprecipIn = value; }

        public Double getTotalsnowCM() { return totalsnowCM; }
        public void setTotalsnowCM(double value) { this.totalsnowCM = value; }

        public Double getAvgvisKM() { return avgvisKM; }
        public void setAvgvisKM(double value) { this.avgvisKM = value; }

        public Double getAvgvisMiles() { return avgvisMiles; }
        public void setAvgvisMiles(double value) { this.avgvisMiles = value; }

        public Double getAvghumidity() { return avghumidity; }
        public void setAvghumidity(double value) { this.avghumidity = value; }

        public long getDailyWillItRain() { return dailyWillItRain; }
        public void setDailyWillItRain(long value) { this.dailyWillItRain = value; }

        public Double getDailyChanceOfRain() { return dailyChanceOfRain; }
        public void setDailyChanceOfRain(Double value) { this.dailyChanceOfRain = value; }

        public long getDailyWillItSnow() { return dailyWillItSnow; }
        public void setDailyWillItSnow(long value) { this.dailyWillItSnow = value; }

        public Double getDailyChanceOfSnow() { return dailyChanceOfSnow; }
        public void setDailyChanceOfSnow(Double value) { this.dailyChanceOfSnow = value; }

        public Condition getCondition() { return condition; }
        public void setCondition(Condition value) { this.condition = value; }

        public Double getUv() { return uv; }
        public void setUv(double value) { this.uv = value; }
    }

    // The hour block
    public class Hour {
        private long timeEpoch;
        private String time;
        private Double tempC;
        private Double tempF;
        private long isDay;
        private Condition condition;
        private Double windMph;
        private Double windKph;
        private long windDegree;
        private String windDir;
        private Double pressureMB;
        private Double pressureIn;
        private Double precipMm;
        private Double precipIn;
        private long humidity;
        private long cloud;
        private Double feelslikeC;
        private Double feelslikeF;
        private Double windchillC;
        private Double windchillF;
        private Double heatindexC;
        private Double heatindexF;
        private Double dewpointC;
        private Double dewpointF;
        private long willItRain;
        private Double chanceOfRain;
        private long willItSnow;
        private Double chanceOfSnow;
        private Double visKM;
        private Double visMiles;
        private Double gustMph;
        private Double gustKph;
        private Double uv;

        public Hour(JSONObject o) throws JSONException {
            condition = new Condition(o.getJSONObject("condition"));
            tempC = o.getDouble("temp_c");
            time = o.getString("time");
            chanceOfRain = o.getDouble("chance_of_rain");
            chanceOfSnow = o.getDouble("chance_of_snow");
            timeEpoch = o.getLong("time_epoch");
        }
        public long getTimeEpoch() { return timeEpoch; }
        public void setTimeEpoch(long value) { this.timeEpoch = value; }

        public String getTime() { return time; }
        public void setTime(String value) { this.time = value; }

        public Double getTempC() { return tempC; }
        public void setTempC(double value) { this.tempC = value; }

        public Double getTempF() { return tempF; }
        public void setTempF(double value) { this.tempF = value; }

        public long getIsDay() { return isDay; }
        public void setIsDay(long value) { this.isDay = value; }

        public Condition getCondition() { return condition; }
        public void setCondition(Condition value) { this.condition = value; }

        public Double getWindMph() { return windMph; }
        public void setWindMph(double value) { this.windMph = value; }

        public Double getWindKph() { return windKph; }
        public void setWindKph(double value) { this.windKph = value; }

        public long getWindDegree() { return windDegree; }
        public void setWindDegree(long value) { this.windDegree = value; }

        public String getWindDir() { return windDir; }
        public void setWindDir(String value) { this.windDir = value; }

        public Double getPressureMB() { return pressureMB; }
        public void setPressureMB(double value) { this.pressureMB = value; }

        public Double getPressureIn() { return pressureIn; }
        public void setPressureIn(double value) { this.pressureIn = value; }

        public Double getPrecipMm() { return precipMm; }
        public void setPrecipMm(double value) { this.precipMm = value; }

        public Double getPrecipIn() { return precipIn; }
        public void setPrecipIn(double value) { this.precipIn = value; }

        public long getHumidity() { return humidity; }
        public void setHumidity(long value) { this.humidity = value; }

        public long getCloud() { return cloud; }
        public void setCloud(long value) { this.cloud = value; }

        public Double getFeelslikeC() { return feelslikeC; }
        public void setFeelslikeC(double value) { this.feelslikeC = value; }

        public Double getFeelslikeF() { return feelslikeF; }
        public void setFeelslikeF(double value) { this.feelslikeF = value; }

        public Double getWindchillC() { return windchillC; }
        public void setWindchillC(double value) { this.windchillC = value; }

        public Double getWindchillF() { return windchillF; }
        public void setWindchillF(double value) { this.windchillF = value; }

        public Double getHeatindexC() { return heatindexC; }
        public void setHeatindexC(double value) { this.heatindexC = value; }

        public Double getHeatindexF() { return heatindexF; }
        public void setHeatindexF(double value) { this.heatindexF = value; }

        public Double getDewpointC() { return dewpointC; }
        public void setDewpointC(double value) { this.dewpointC = value; }

        public Double getDewpointF() { return dewpointF; }
        public void setDewpointF(double value) { this.dewpointF = value; }

        public long getWillItRain() { return willItRain; }
        public void setWillItRain(long value) { this.willItRain = value; }

        public Double getChanceOfRain() { return chanceOfRain; }
        public void setChanceOfRain(Double value) { this.chanceOfRain = value; }

        public long getWillItSnow() { return willItSnow; }
        public void setWillItSnow(long value) { this.willItSnow = value; }

        public Double getChanceOfSnow() { return chanceOfSnow; }
        public void setChanceOfSnow(Double value) { this.chanceOfSnow = value; }

        public Double getVisKM() { return visKM; }
        public void setVisKM(double value) { this.visKM = value; }

        public Double getVisMiles() { return visMiles; }
        public void setVisMiles(double value) { this.visMiles = value; }

        public Double getGustMph() { return gustMph; }
        public void setGustMph(double value) { this.gustMph = value; }

        public Double getGustKph() { return gustKph; }
        public void setGustKph(double value) { this.gustKph = value; }

        public Double getUv() { return uv; }
        public void setUv(double value) { this.uv = value; }
    }

    // The location block
    public class Location {
        private String name;
        private String region;
        private String country;
        private Double lat;
        private Double lon;
        private String tzID;
        private long localtimeEpoch;
        private String localtime;

        public Location(JSONObject o) throws JSONException {
            name = o.getString("name");
            lat = o.getDouble("lat");
            lon = o.getDouble("lon");
            localtime = o.getString("localtime");
        }
        public String getName() { return name; }
        public void setName(String value) { this.name = value; }

        public String getRegion() { return region; }
        public void setRegion(String value) { this.region = value; }

        public String getCountry() { return country; }
        public void setCountry(String value) { this.country = value; }

        public Double getLat() { return lat; }
        public void setLat(double value) { this.lat = value; }

        public Double getLon() { return lon; }
        public void setLon(double value) { this.lon = value; }

        public String getTzID() { return tzID; }
        public void setTzID(String value) { this.tzID = value; }

        public long getLocaltimeEpoch() { return localtimeEpoch; }
        public void setLocaltimeEpoch(long value) { this.localtimeEpoch = value; }

        public String getLocaltime() { return localtime; }
        public void setLocaltime(String value) { this.localtime = value; }
    }
}
